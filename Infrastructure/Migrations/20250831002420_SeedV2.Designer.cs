// <auto-generated />
using System;
using Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250831002420_SeedV2")]
    partial class SeedV2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Appointments.Appointment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DentistId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DurationMinutes")
                        .HasColumnType("int");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("StartUtc")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.HasIndex("DentistId", "StartUtc")
                        .IsUnique()
                        .HasFilter("[Status] = 0");

                    b.HasIndex("PatientId", "StartUtc");

                    b.ToTable("Appointments", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("44444444-4444-4444-4444-111111111111"),
                            DentistId = new Guid("11111111-1111-1111-1111-111111111111"),
                            DurationMinutes = 30,
                            PatientId = new Guid("22222222-2222-2222-2222-111111111111"),
                            ServiceId = new Guid("33333333-3333-3333-3333-111111111111"),
                            StartUtc = new DateTimeOffset(new DateTime(2025, 9, 1, 9, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("44444444-4444-4444-4444-222222222222"),
                            DentistId = new Guid("11111111-1111-1111-1111-111111111111"),
                            DurationMinutes = 30,
                            PatientId = new Guid("22222222-2222-2222-2222-222222222222"),
                            ServiceId = new Guid("33333333-3333-3333-3333-111111111111"),
                            StartUtc = new DateTimeOffset(new DateTime(2025, 9, 1, 9, 30, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("44444444-4444-4444-4444-333333333333"),
                            DentistId = new Guid("11111111-1111-1111-1111-111111111111"),
                            DurationMinutes = 60,
                            PatientId = new Guid("22222222-2222-2222-2222-333333333333"),
                            ServiceId = new Guid("33333333-3333-3333-3333-222222222222"),
                            StartUtc = new DateTimeOffset(new DateTime(2025, 9, 1, 10, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("44444444-4444-4444-4444-444444444444"),
                            DentistId = new Guid("11111111-1111-1111-1111-222222222222"),
                            DurationMinutes = 45,
                            PatientId = new Guid("22222222-2222-2222-2222-444444444444"),
                            ServiceId = new Guid("33333333-3333-3333-3333-333333333333"),
                            StartUtc = new DateTimeOffset(new DateTime(2025, 9, 1, 9, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("44444444-4444-4444-4444-555555555555"),
                            DentistId = new Guid("11111111-1111-1111-1111-222222222222"),
                            DurationMinutes = 60,
                            PatientId = new Guid("22222222-2222-2222-2222-555555555555"),
                            ServiceId = new Guid("33333333-3333-3333-3333-222222222222"),
                            StartUtc = new DateTimeOffset(new DateTime(2025, 9, 1, 10, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("44444444-4444-4444-4444-666666666666"),
                            DentistId = new Guid("11111111-1111-1111-1111-333333333333"),
                            DurationMinutes = 30,
                            PatientId = new Guid("22222222-2222-2222-2222-666666666666"),
                            ServiceId = new Guid("33333333-3333-3333-3333-111111111111"),
                            StartUtc = new DateTimeOffset(new DateTime(2025, 9, 2, 11, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Status = 0
                        });
                });

            modelBuilder.Entity("Domain.Dentists.Dentist", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Dentists", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            FullName = "Dr. Alice Smith"
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-222222222222"),
                            FullName = "Dr. Bob Lee"
                        },
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-333333333333"),
                            FullName = "Dr. Carol Tan"
                        });
                });

            modelBuilder.Entity("Domain.Patients.Patient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Patients", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-111111111111"),
                            Email = "john@example.com",
                            FullName = "John Doe"
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222222"),
                            Email = "jane.roe@example.com",
                            FullName = "Jane Roe"
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-333333333333"),
                            Email = "omar.aziz@example.com",
                            FullName = "Omar Aziz"
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-444444444444"),
                            Email = "lina.haddad@example.com",
                            FullName = "Lina Haddad"
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-555555555555"),
                            Email = "mei.chen@example.com",
                            FullName = "Mei Chen"
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-666666666666"),
                            Email = "carlos.ruiz@example.com",
                            FullName = "Carlos Ruiz"
                        });
                });

            modelBuilder.Entity("Domain.Services.Service", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DurationMinutes")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Services", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-111111111111"),
                            DurationMinutes = 30,
                            Name = "Cleaning"
                        },
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-222222222222"),
                            DurationMinutes = 60,
                            Name = "Filling"
                        },
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333333"),
                            DurationMinutes = 45,
                            Name = "Whitening"
                        });
                });

            modelBuilder.Entity("Domain.Appointments.Appointment", b =>
                {
                    b.HasOne("Domain.Dentists.Dentist", "Dentist")
                        .WithMany()
                        .HasForeignKey("DentistId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Patients.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Services.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Dentist");

                    b.Navigation("Patient");

                    b.Navigation("Service");
                });
#pragma warning restore 612, 618
        }
    }
}
